<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.idealismxxm.onlinejudge.dao.ProblemDao">
    <!-- Problem的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Problem_Map" type="cn.idealismxxm.onlinejudge.domain.entity.Problem">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime"/>
        <result column="time_limit" jdbcType="INTEGER" property="timeLimit"/>
        <result column="description_id" jdbcType="INTEGER" property="descriptionId"/>
        <result column="public_status" jdbcType="TINYINT" property="publicStatus"/>
        <result column="memory_limit" jdbcType="INTEGER" property="memoryLimit"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="original_oj" jdbcType="SMALLINT" property="originalOj"/>
        <result column="original_id" jdbcType="VARCHAR" property="originalId"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
    </resultMap>

    <!-- 数据库中表名为:problem的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="problem_Column">
        problem.id as id
        ,problem.updated_time as updated_time
        ,problem.time_limit as time_limit
        ,problem.description_id as description_id
        ,problem.public_status as public_status
        ,problem.memory_limit as memory_limit
        ,problem.title as title
        ,problem.original_oj as original_oj
        ,problem.original_id as original_id
        ,problem.url as url
    </sql>

    <!--获得类名为:Problem对应的数据库表的数据总行数 -->
    <select id="getProblemRowCount" resultType="java.lang.Long">
        select count(id) from problem
    </select>
    <!-- 获得类名为:Problem对应数据库中表的数据集合 -->
    <select id="selectProblem" resultMap="result_Problem_Map">
        select
        <include refid="problem_Column"/>
        from problem
    </select>

    <!-- 获得一个Problem对象,以参数Problem对象中不为空的属性作为条件进行查询-->
    <select id="selectProblemByObj" parameterType="cn.idealismxxm.onlinejudge.domain.entity.Problem"
            resultMap="result_Problem_Map">
        select
        <include refid="problem_Column"/>
        from problem
        <where>
            <if test="url != null ">and problem.url = #{url,jdbcType=VARCHAR}</if>
            <if test="originalId != null ">and problem.original_id = #{originalId,jdbcType=VARCHAR}</if>
            <if test="originalOj != null ">and problem.original_oj = #{originalOj,jdbcType=SMALLINT}</if>
            <if test="title != null ">and problem.title = #{title,jdbcType=VARCHAR}</if>
            <if test="memoryLimit != null ">and problem.memory_limit = #{memoryLimit,jdbcType=INTEGER}</if>
            <if test="publicStatus != null ">and problem.public_status = #{publicStatus,jdbcType=TINYINT}</if>
            <if test="descriptionId != null ">and problem.description_id = #{descriptionId,jdbcType=INTEGER}</if>
            <if test="timeLimit != null ">and problem.time_limit = #{timeLimit,jdbcType=INTEGER}</if>
            <if test="updatedTime != null ">and problem.updated_time = #{updatedTime,jdbcType=TIMESTAMP}</if>
            <if test="id != null ">and problem.id = #{id,jdbcType=INTEGER}</if>
        </where>
    </select>

    <!-- 通过Problem的id获得对应数据库中表的数据对象-->
    <select id="selectProblemById" parameterType="java.lang.Integer" resultMap="result_Problem_Map">
        select
        <include refid="problem_Column"/>
        from problem
        where problem.id = #{id,jdbcType=INTEGER}
    </select>

    <!-- 将Problem插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertProblem" useGeneratedKeys="true" keyProperty="id" parameterType="cn.idealismxxm.onlinejudge.domain.entity.Problem">
        insert into problem(id,updated_time,time_limit,description_id,public_status,memory_limit,title,original_oj,original_id,url)
        values(#{id,jdbcType=INTEGER},now(),#{timeLimit,jdbcType=INTEGER},#{descriptionId,jdbcType=INTEGER},#{publicStatus,jdbcType=TINYINT},#{memoryLimit,jdbcType=INTEGER},#{title,jdbcType=VARCHAR},#{originalOj,jdbcType=SMALLINT},#{originalId,jdbcType=VARCHAR},#{url,jdbcType=VARCHAR})
    </insert>

    <!-- 将Problem中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyProblem" useGeneratedKeys="true" keyProperty="id" parameterType="cn.idealismxxm.onlinejudge.domain.entity.Problem">
        insert into problem
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            updated_time,
            <if test="timeLimit != null">time_limit,</if>
            <if test="descriptionId != null">description_id,</if>
            <if test="publicStatus != null">public_status,</if>
            <if test="memoryLimit != null">memory_limit,</if>
            <if test="title != null">title,</if>
            <if test="originalOj != null">original_oj,</if>
            <if test="originalId != null">original_id,</if>
            <if test="url != null">url,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id,jdbcType=INTEGER},</if>
            now(),
            <if test="timeLimit != null">#{timeLimit,jdbcType=INTEGER},</if>
            <if test="descriptionId != null">#{descriptionId,jdbcType=INTEGER},</if>
            <if test="publicStatus != null">#{publicStatus,jdbcType=TINYINT},</if>
            <if test="memoryLimit != null">#{memoryLimit,jdbcType=INTEGER},</if>
            <if test="title != null">#{title,jdbcType=VARCHAR},</if>
            <if test="originalOj != null">#{originalOj,jdbcType=SMALLINT},</if>
            <if test="originalId != null">#{originalId,jdbcType=VARCHAR},</if>
            <if test="url != null">#{url,jdbcType=VARCHAR},</if>
        </trim>
    </insert>

    <!-- 将Problem批量插入到对应数据库的表中-->
    <insert id="insertProblemByBatch" parameterType="ArrayList">
        insert into
        problem(id,updated_time,time_limit,description_id,public_status,memory_limit,title,original_oj,original_id,url)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id,jdbcType=INTEGER},#{item.updatedTime,jdbcType=TIMESTAMP},#{item.timeLimit,jdbcType=INTEGER},#{item.descriptionId,jdbcType=INTEGER},#{item.publicStatus,jdbcType=TINYINT},#{item.memoryLimit,jdbcType=INTEGER},#{item.title,jdbcType=VARCHAR},#{item.originalOj,jdbcType=SMALLINT},#{item.originalId,jdbcType=VARCHAR},#{item.url,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <!-- 通过Problem的id将数据库表中对应的数据删除-->
    <delete id="deleteProblemById" parameterType="java.lang.Integer">
        delete from problem
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 通过Problem的id将Problem的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateProblemById" parameterType="cn.idealismxxm.onlinejudge.domain.entity.Problem">
        update problem set
        updated_time=#{updatedTime,jdbcType=TIMESTAMP}
        ,time_limit=#{timeLimit,jdbcType=INTEGER}
        ,description_id=#{descriptionId,jdbcType=INTEGER}
        ,public_status=#{publicStatus,jdbcType=TINYINT}
        ,memory_limit=#{memoryLimit,jdbcType=INTEGER}
        ,title=#{title,jdbcType=VARCHAR}
        ,original_oj=#{originalOj,jdbcType=SMALLINT}
        ,original_id=#{originalId,jdbcType=VARCHAR}
        ,url=#{url,jdbcType=VARCHAR}
        where id=#{id,jdbcType=INTEGER}
    </update>

    <!-- 通过Problem的id将Problem中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyProblemById" parameterType="cn.idealismxxm.onlinejudge.domain.entity.Problem">
        update problem
        <set>
            <if test="updatedTime != null">
                updated_time=#{updatedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="timeLimit != null">
                time_limit=#{timeLimit,jdbcType=INTEGER},
            </if>
            <if test="descriptionId != null">
                description_id=#{descriptionId,jdbcType=INTEGER},
            </if>
            <if test="publicStatus != null">
                public_status=#{publicStatus,jdbcType=TINYINT},
            </if>
            <if test="memoryLimit != null">
                memory_limit=#{memoryLimit,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                title=#{title,jdbcType=VARCHAR},
            </if>
            <if test="originalOj != null">
                original_oj=#{originalOj,jdbcType=SMALLINT},
            </if>
            <if test="originalId != null">
                original_id=#{originalId,jdbcType=VARCHAR},
            </if>
            <if test="url != null">
                url=#{url,jdbcType=VARCHAR},
            </if>
        </set>
        where id=#{id,jdbcType=INTEGER}
    </update>

    <!-- 统计 符合查询条件 的题目总数 -->
    <select id="countProblemByQueryMap" parameterType="java.util.Map" resultType="java.lang.Integer">
        SELECT COUNT(id)
        FROM problem
        <where>
            <if test="title != null ">AND title LIKE "%"#{title,jdbcType=VARCHAR}"%"</if>
            <if test="ids != null ">
                AND id IN
                <foreach collection="ids" index="index" item="id" open="(" separator="," close=")"> #{id, jdbcType=INTEGER} </foreach>
            </if>
        </where>
    </select>

    <!-- 分页查询 符合查询条件 的题目 -->
    <select id="pageProblemByQueryMap" parameterType="java.util.Map" resultMap="result_Problem_Map">
        SELECT
        <include refid="problem_Column"/>
        FROM problem
        <where>
            <if test="title != null ">AND title LIKE "%"#{title,jdbcType=VARCHAR}"%"</if>
            <if test="ids != null ">
                AND id IN
                <foreach collection="ids" index="index" item="id" open="(" separator="," close=")"> #{id, jdbcType=INTEGER} </foreach>
            </if>
        </where>
        <if test="limit != null">
            <if test="offset != null">
                LIMIT #{offset, jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
            </if>
            <if test="offset == null">
                LIMIT #{limit,jdbcType=INTEGER}
            </if>
        </if>
    </select>

    <!-- 获取 主键 在 ids 列表中的题目列表 -->
    <select id="listProblemByIds" parameterType="java.util.List" resultMap="result_Problem_Map">
        SELECT
        <include refid="problem_Column"/>
        FROM problem
        WHERE
            id IN
            <foreach collection="list" index="index" item="id" open="(" separator="," close=")"> #{id, jdbcType=INTEGER} </foreach>
    </select>
</mapper>