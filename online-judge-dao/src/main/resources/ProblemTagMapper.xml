<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.idealismxxm.onlinejudge.dao.ProblemTagDao">
    <!-- ProblemTag的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_ProblemTag_Map" type="cn.idealismxxm.onlinejudge.domain.entity.ProblemTag">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
        <result column="deleted_status" jdbcType="TINYINT" property="deletedStatus" />
        <result column="problem_id" jdbcType="INTEGER" property="problemId" />
        <result column="tag_id" jdbcType="INTEGER" property="tagId" />
        <result column="updator" jdbcType="VARCHAR" property="updator" />
    </resultMap>

    <!-- 数据库中表名为:problem_tag的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="problem_tag_Column">
        problem_tag.id as id
        ,problem_tag.updated_time as updated_time
        ,problem_tag.deleted_status as deleted_status
        ,problem_tag.problem_id as problem_id
        ,problem_tag.tag_id as tag_id
        ,problem_tag.updator as updator
    </sql>

    <!--获得类名为:ProblemTag对应的数据库表的数据总行数 -->
    <select id="getProblemTagRowCount" resultType="java.lang.Long">
        select count(id) from problem_tag
    </select>
    <!-- 获得类名为:ProblemTag对应数据库中表的数据集合 -->
    <select id="selectProblemTag" resultMap="result_ProblemTag_Map">
        select 
        <include refid="problem_tag_Column" /> 
        from problem_tag
    </select> 

    <!-- 获得一个ProblemTag对象,以参数ProblemTag对象中不为空的属性作为条件进行查询-->
    <select id="selectProblemTagByObj" parameterType="cn.idealismxxm.onlinejudge.domain.entity.ProblemTag" resultMap="result_ProblemTag_Map">
        select 
            <include refid="problem_tag_Column" /> 
        from problem_tag
        <where>
            <if test="updator != null "> and problem_tag.updator = #{updator,jdbcType=VARCHAR}</if>
            <if test="tagId != null "> and problem_tag.tag_id = #{tagId,jdbcType=INTEGER}</if>
            <if test="problemId != null "> and problem_tag.problem_id = #{problemId,jdbcType=INTEGER}</if>
            <if test="deletedStatus != null "> and problem_tag.deleted_status = #{deletedStatus,jdbcType=TINYINT}</if>
            <if test="updatedTime != null "> and problem_tag.updated_time = #{updatedTime,jdbcType=TIMESTAMP}</if>
            <if test="id != null "> and problem_tag.id = #{id,jdbcType=INTEGER}</if>
        </where>
    </select> 

    <!-- 通过ProblemTag的id获得对应数据库中表的数据对象-->
    <select id="selectProblemTagById" parameterType="java.lang.Integer" resultMap="result_ProblemTag_Map">
        select 
            <include refid="problem_tag_Column" /> 
        from problem_tag
        where problem_tag.id = #{id,jdbcType=INTEGER}
    </select> 

    <!-- 将ProblemTag插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertProblemTag" useGeneratedKeys="true" keyProperty="id" parameterType="cn.idealismxxm.onlinejudge.domain.entity.ProblemTag">
        insert into problem_tag(id,updated_time,deleted_status,problem_id,tag_id,updator) 
        values(#{id,jdbcType=INTEGER},now(),#{deletedStatus,jdbcType=TINYINT},#{problemId,jdbcType=INTEGER},#{tagId,jdbcType=INTEGER},#{updator,jdbcType=VARCHAR})
    </insert>

    <!-- 将ProblemTag中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyProblemTag" useGeneratedKeys="true" keyProperty="id" parameterType="cn.idealismxxm.onlinejudge.domain.entity.ProblemTag">
        insert into problem_tag
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            updated_time,
            <if test="deletedStatus != null">deleted_status,</if>
            <if test="problemId != null">problem_id,</if>
            <if test="tagId != null">tag_id,</if>
            <if test="updator != null">updator,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id,jdbcType=INTEGER},</if>
            now(),
            <if test="deletedStatus != null"> #{deletedStatus,jdbcType=TINYINT},</if>
            <if test="problemId != null"> #{problemId,jdbcType=INTEGER},</if>
            <if test="tagId != null"> #{tagId,jdbcType=INTEGER},</if>
            <if test="updator != null"> #{updator,jdbcType=VARCHAR},</if>
        </trim>
    </insert>

    <!-- 将ProblemTag批量插入到对应数据库的表中-->
    <insert id="insertProblemTagByBatch" parameterType="ArrayList">
        insert into problem_tag(id,updated_time,deleted_status,problem_id,tag_id,updator) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id,jdbcType=INTEGER},now(),#{item.deletedStatus,jdbcType=TINYINT},#{item.problemId,jdbcType=INTEGER},#{item.tagId,jdbcType=INTEGER},#{item.updator,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <!-- 通过ProblemTag的id将数据库表中对应的数据删除-->
    <delete id="deleteProblemTagById" parameterType="java.lang.Integer">
        delete from problem_tag
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 通过ProblemTag的id将ProblemTag的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateProblemTagById" parameterType="cn.idealismxxm.onlinejudge.domain.entity.ProblemTag">
        update problem_tag set
            updated_time=now()
            ,deleted_status=#{deletedStatus,jdbcType=TINYINT}
            ,problem_id=#{problemId,jdbcType=INTEGER}
            ,tag_id=#{tagId,jdbcType=INTEGER}
            ,updator=#{updator,jdbcType=VARCHAR}
        where id=#{id,jdbcType=INTEGER}
    </update>

    <!-- 通过ProblemTag的id将ProblemTag中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyProblemTagById" parameterType="cn.idealismxxm.onlinejudge.domain.entity.ProblemTag">
        update problem_tag
        <set>
            updated_time=now(),
            <if test="deletedStatus != null">
                deleted_status=#{deletedStatus,jdbcType=TINYINT},
            </if>
            <if test="problemId != null">
                problem_id=#{problemId,jdbcType=INTEGER},
            </if>
            <if test="tagId != null">
                tag_id=#{tagId,jdbcType=INTEGER},
            </if>
            <if test="updator != null">
                updator=#{updator,jdbcType=VARCHAR},
            </if>
        </set>
        where id=#{id,jdbcType=INTEGER}
    </update>

    <!-- 通过 题目id 和 标签id 获取题目标签关系实例 -->
    <select id="getProblemTagByProblemIdAndTagId" parameterType="java.lang.Integer" resultMap="result_ProblemTag_Map">
        SELECT
        <include refid="problem_tag_Column" />
        FROM problem_tag
        WHERE problem_id = #{problemId, jdbcType=INTEGER}
            AND tag_id = #{tagId, jdbcType=INTEGER}
    </select>

    <!-- 列出 题目id 下 删除状态 为 deleteStatus 的所有标签id -->
    <select id="listTagIdByProblemIdAndDeletedStatus" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT tag_id
        FROM problem_tag
        WHERE problem_id = #{problemId, jdbcType=INTEGER}
            <if test="deletedStatus != null">
                AND deleted_status = #{deletedStatus,jdbcType=TINYINT}
            </if>
    </select>

    <!-- 获取 拥有 tagId  的标签，且关系为 DeletedStatus 的题目id列表 -->
    <select id="listProblemIdByTagIdAndDeletedStatus" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT problem_id
        FROM problem_tag
        WHERE tag_id = #{tagId, jdbcType=INTEGER}
        <if test="deletedStatus != null">
            AND deleted_status = #{deletedStatus,jdbcType=TINYINT}
        </if>
    </select>
</mapper>